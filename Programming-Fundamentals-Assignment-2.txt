Q1:-
Statically Typed Language:
1. Data types of variables are determined and checked at **compile time**.
2. Variables must be explicitly declared with their data types before use.
3. Type checking ensures only compatible operations are performed on variables.
4. Types are fixed and cannot be changed during runtime.
5. Examples: Java, C, C++, Swift.

Dynamically Typed Language:
1. Data types of variables are determined and checked at **runtime** (during execution).
2. Variables do not require explicit type declarations; types are inferred from assigned values.
3. Offers flexibility but may lead to type-related errors during runtime.
4. Examples: Python, JavaScript, Ruby, PHP.

Strongly Typed Language:
1. Type safety is strictly enforced, and type conversions are not performed implicitly.
2. Data types are fixed and cannot be implicitly converted into other types without explicit typecasting.
3. Early detection of type-related errors during compilation.
4. Applies to both statically and dynamically typed languages.
5. Examples: Java, C#, Swift, Haskell.

Loosely Typed Language (Weakly Typed Language):
1. The type system is more flexible, allowing automatic type conversions.
2. Variables can change their data type without explicit typecasting.
3. May lead to unexpected results if not handled carefully.
4. Emphasizes ease of use over strict type safety.
5. Examples: JavaScript, PHP.

Java falls into the category of:
- A **statically typed** language because data types are checked at compile time.
- A **strongly typed** language because it enforces strict type safety and doesn't allow implicit type conversions.

Q2:-

1. Case Sensitive:
- Case sensitivity means that the programming language distinguishes between uppercase and lowercase characters in identifiers.
- Identifiers with different cases are treated as distinct entities.
- For example, in a case-sensitive language:
  - `variable` and `Variable` are considered two different variables.
  - `functionName` and `FunctionName` are considered two different function names.

**Example of Case Sensitive Programming Language:**
- Python is a case-sensitive language. In Python, `variable` and `Variable` are treated as different variables.

2. Case Insensitive:
- Case insensitivity means that the programming language treats uppercase and lowercase characters in identifiers as equivalent.
- Identifiers written with different cases are considered the same entity.
- For example, in a case-insensitive language:
  - `variable` and `Variable` are considered the same variable.
  - `functionName` and `FunctionName` are considered the same function name.

**Example of Case Insensitive Programming Language:**
- SQL (Structured Query Language) is case-insensitive for identifiers. In SQL, `SELECT`, `Select`, and `select` are all treated as the same keyword.

3. Case Sensitive-Insensitive (Partial Case Insensitive):
- Some programming languages exhibit partial case sensitivity, where the treatment of case sensitivity depends on specific contexts.
- For instance, the language may be case-sensitive for variable names but case-insensitive for keywords.
- In this scenario:
  - `variable` and `Variable` would be considered distinct variables.
  - `if`, `IF`, and `If` would be considered the same keyword.

**Example of Case Sensitive-Insensitive Programming Language:**
- JavaScript is an example of a partially case-sensitive language. Variable names are case-sensitive, but JavaScript keywords like `if`, `for`, `while`, etc., are case-insensitive.

**Java in Relation to These Terms:**
- Java is a **case-sensitive** programming language. It differentiates between uppercase and lowercase characters in identifiers.
- For example, `variable` and `Variable` would be considered two different variables in Java, and `if`, `IF`, and `If` would be treated as different keywords in Java.
